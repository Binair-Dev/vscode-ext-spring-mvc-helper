{
    "Spring Jakarta Entity": {
        "prefix": "spring-entity-jakarta",
        "body": [
          "package ${1};",
          "",
          "import jakarta.persistence.*;",
          "import lombok.*;",
          "",
          "import java.time.LocalDate;",
          "",
          "@Getter @Setter",
          "@NoArgsConstructor",
          "@Entity(name = \"${2}\")",
          "public class ${3:Entity} {",
          "    @Id",
          "    @GeneratedValue(strategy = GenerationType.AUTO)",
          "    @Column(name = \"${4}\")",
          "    private Long id;",
          "    private String first_name;",
          "    private String last_name;",
          "",
          "    @Enumerated(EnumType.STRING)",
          "    private EnumUserRole role;",
          "",
          "    private LocalDate birthDate;",
          "    private boolean enabled;",
          "",
          "}"
        ],
        "description": "Snippet for Spring Jakarta User Entity"
    },
    "Spring UserDTO": {
        "prefix": "spring-dto",
        "body": [
          "package ${1};",
          "",
          "import lombok.Builder;",
          "import lombok.Data;",
          "",
          "import java.time.LocalDate;",
          "",
          "@Data",
          "@Builder",
          "public class ${2:EntityDTO} {",
          "    private Long id;",
          "    private String first_name;",
          "    private String last_name;",
          "    private EnumUserRole role;",
          "    private LocalDate birthDate;",
          "    private boolean enabled;",
          "",
          "    public static ${2:EntityDTO} toDTO(${3} entity) {",
          "        if (entity == null)",
          "            throw new IllegalArgumentException(\"Ne peut Ãªtre null\");",
          "",
          "        return ${2:EntityDTO}.builder()",
          "                .id(entity.getId())",
          "                .first_name(entity.getFirst_name())",
          "                .last_name(entity.getLast_name())",
          "                .role(entity.getRole())",
          "                .birthDate(entity.getBirthDate())",
          "                .enabled(entity.isEnabled())",
          "                .build();",
          "    }",
          "}"
        ],
        "description": "Snippet for Spring UserDTO"
    },
    "Spring UserForm": {
        "prefix": "spring-userform-jakarta",
        "body": [
          "package ${1};",
          "",
          "import jakarta.validation.constraints.NotNull;",
          "import jakarta.validation.constraints.Past;",
          "import jakarta.validation.constraints.Size;",
          "import lombok.Data;",
          "import org.springframework.format.annotation.DateTimeFormat;",
          "",
          "import java.time.LocalDate;",
          "import java.time.temporal.ChronoUnit;",
          "",
          "@Data",
          "public class ${2:EntityForm} {",
          "    @NotNull",
          "    @Size(min=3)",
          "    private String first_name;",
          "",
          "    @NotNull",
          "    @Size(min=3)",
          "    private String last_name;",
          "",
          "    @NotNull",
          "    @Size(min=3)",
          "    @IsEmail",
          "    private String email;",
          "",
          "    @NotNull",
          "    @DateTimeFormat(pattern = \"dd-MM-yyyy\")",
          "    private LocalDate birthDate;",
          "}"
        ],
        "description": "Snippet for Spring UserForm"
    },
    "Spring UserRepository": {
        "prefix": "spring-user-repository",
        "body": [
          "package ${1};",
          "",
          "import org.springframework.data.jpa.repository.JpaRepository;",
          "",
          "public interface UserRepository extends JpaRepository<${2}, Long> {}",
        ],
        "description": "Snippet for Spring UserRepository"
    },
    "Spring UserService": {
        "prefix": "spring-user-service",
        "body": [
          "package ${1};",
          "",
          "import java.util.List;",
          "",
          "public interface ${2} {",
          "    void create(${3} form);",
          "    ${4} getOne(Long id);",
          "    void update(${3} form, Long id);",
          "    List<${4}> getAll();",
          "}"
        ],
        "description": "Snippet for Spring UserService"
    },
    "Spring UserServiceImpl": {
        "prefix": "spring-user-service-impl",
        "body": [
          "package ${1};",
          "",
          "import org.springframework.beans.BeanUtils;",
          "import org.springframework.stereotype.Service;",
          "",
          "import java.util.List;",
          "import java.util.stream.Collectors;",
          "",
          "@Service",
          "public class ${2:UserServiceImpl} implements UserService {",
          "    private final ${3:UserRepository} userRepository;",
          "",
          "    public ${2:UserServiceImpl}(${3:UserRepository} userRepository) {",
          "        this.userRepository = userRepository;",
          "        this.addressRepository = addressRepository;",
          "    }",
          "",
          "    @Override",
          "    public void create(${3:UserForm} form) {",
          "        ${4:User} entity = new ${4:User}();",
          "        BeanUtils.copyProperties(form, entity);",
          "",
          "        userRepository.save(entity);",
          "    }",
          "",
          "    @Override",
          "    public ${5:UserDTO} getOne(Long id) {",
          "        return userRepository.findById(id)",
          "                .map(entite -> ${5:UserDTO}.toDTO(entite))",
          "                .orElseThrow(() -> new RuntimeException(\"User not found\"));",
          "    }",
          "",
          "    @Override",
          "    public void update(${3:UserForm} form, Long id) {",
          "        ${4:User} userToUpdate = userRepository.findById(id)",
          "                .orElseThrow(() -> new RuntimeException(\"User not found\"));",
          "",
          "        userToUpdate.setFirst_name(form.getFirst_name());",
          "        userToUpdate.setLast_name(form.getLast_name());",
          "        userToUpdate.setBirthDate(form.getBirthDate());",
          "",
          "        userRepository.save(userToUpdate);",
          "    }",
          "",
          "    @Override",
          "    public List<${5:UserDTO}> getAll() {",
          "        return userRepository.findAll().stream()",
          "                .map(u -> ${5:UserDTO}.toDTO(u))",
          "                .collect(Collectors.toList());",
          "    }",
          "}"
        ],
        "description": "Snippet for Spring UserServiceImpl"
    },
    "Spring UserController": {
        "prefix": "spring-user-controller-jakarta",
        "body": [
          "package ${1};",
          "",
          "import jakarta.validation.Valid;",
          "import org.springframework.stereotype.Controller;",
          "import org.springframework.ui.Model;",
          "import org.springframework.validation.BindingResult;",
          "import org.springframework.web.bind.annotation.*;",
          "",
          "import java.util.List;",
          "",
          "@Controller",
          "@RequestMapping(\"/${2}\")",
          "public class ${3:UserController} {",
          "    private final ${4:UserService} userService;",
          "",
          "    public ${3:UserController}(${4:UserService} userService) {",
          "        this.userService = userService;",
          "    }",
          "",
          "    @GetMapping(\"/users\")",
          "    public String displayAll(Model model){",
          "        List<${4:UserDTO}> liste = userService.getAll();",
          "        model.addAttribute(\"list\", liste);",
          "        return \"${2}/users\";",
          "    }",
          "",
          "    @GetMapping(\"/{id:[0-9]+}\")",
          "    public String displayOne(Model model, @PathVariable Long id){",
          "        ${4:UserDTO} choosenOne = userService.getOne(id);",
          "        model.addAttribute(\"user\", choosenOne);",
          "        return \"${2}/user\";",
          "    }",
          "",
          "    @GetMapping(\"/create-user\")",
          "    public String create(Model model){",
          "        model.addAttribute(\"formulaire\",new ${5:UserForm}());",
          "        return \"${2}/create-user\";",
          "    }",
          "",
          "    @PostMapping(\"/create-user\")",
          "    public String processCreate(@ModelAttribute(\"formulaire\") @Valid ${5:UserForm} form, BindingResult bindingResult){",
          "        if(bindingResult.hasErrors()){",
          "            return \"${2}/create-user\";",
          "        }",
          "",
          "        userService.create(form);",
          "        return \"redirect:/${2}/users\";",
          "    }",
          "",
          "    @GetMapping(\"/update-${2}/{id:[0-9]+}\")",
          "    public String update(Model model, @PathVariable Long id){",
          "        ${5:UserForm} form = new ${5:UserForm}();",
          "",
          "        ${4:UserDTO} user = userService.getOne(id);",
          "        form.setFirst_name(user.getFirst_name());",
          "        form.setLast_name(user.getLast_name());",
          "        form.setBirthDate(user.getBirthDate());",
          "",
          "        model.addAttribute(\"formulaire\",form);",
          "        model.addAttribute(\"id\",id);",
          "        return \"${2}/update-user\";",
          "    }",
          "",
          "    @PostMapping(\"/update-${2}/{id:[0-9]+}\")",
          "    public String processUpdate(@ModelAttribute(\"formulaire\") @Valid ${5:UserForm} form, BindingResult bindingResult, @PathVariable Long id){",
          "        if(bindingResult.hasErrors()){",
          "            return \"${2}/update-user\";",
          "        }",
          "        userService.update(form,id);",
          "        return \"redirect:/${2}/users\";",
          "    }",
          "}"
        ],
        "description": "Snippet for Spring UserController"
    },
    "PasswordMatches Constraint": {
        "prefix": "spring-constraint-jakarta",
        "body": [
          "package ${1};",
          "",
          "import java.lang.annotation.ElementType;",
          "import java.lang.annotation.Retention;",
          "import java.lang.annotation.RetentionPolicy;",
          "import java.lang.annotation.Target;",
          "",
          "import jakarta.validation.Constraint;",
          "import jakarta.validation.Payload;",
          "",
          "@Target({ElementType.TYPE})",
          "@Retention(RetentionPolicy.RUNTIME)",
          "@Constraint(validatedBy = ${2:PasswordConstraintValidator}.class)",
          "public @interface ${3:PasswordConstraint} {",
          "    String message() default \"${4:Password are not matching}\";",
          "",
          "    Class<?>[] groups() default {};",
          "",
          "    Class<? extends Payload>[] payload() default {};",
          "}"
        ],
        "description": "Snippet for PasswordMatches Constraint"
    },
    "PasswordConfirmationValidator": {
        "prefix": "spring-validator-jakarta",
        "body": [
          "package ${1};",
          "",
          "import jakarta.validation.ConstraintValidator;",
          "import jakarta.validation.ConstraintValidatorContext;",
          "",
          "public class ${2:PasswordConstraintValidator} implements ConstraintValidator<${3:PasswordValidator}, ${4:String}> {",
          "    @Override",
          "    public void initialize(${3:PasswordValidator} constraintAnnotation) {",
          "    }",
          "",
          "    @Override",
          "    public boolean isValid(${4:String} ${5:string}, ConstraintValidatorContext context) {",
          "        if (${5:string} == null) {",
          "            return true; // La validation est considÃ©rÃ©e comme rÃ©ussie si l'utilisateur est nul",
          "        }",
          "",
          "        String password = ${5:string}.getPassword();",
          "        String passwordConfirm = ${5:string}.getConfirmPassword();",
          "",
          "        // VÃ©rifiez si le mot de passe correspond Ã  la confirmation du mot de passe",
          "        return password != null && password.equals(passwordConfirm);",
          "    }",
          "}"
        ],
        "description": "Snippet for PasswordConfirmationValidator"
    }
}